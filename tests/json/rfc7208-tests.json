[
  {
    "description": "Initial processing",
    "zonedata": {
      "ctrl.example.com": [
        {
          "SPF": "v=spf1 a:ctrl.example.com\rptr -all"
        },
        {
          "A": "192.0.2.3"
        }
      ],
      "hosed2.example.com": [
        {
          "SPF": "v=spf1 \u0080a:example.net -all"
        }
      ],
      "nothosed.example.com": [
        {
          "SPF": "v=spf1 a:example.net -all"
        },
        {
          "SPF": "\u0096"
        }
      ],
      "a12345678901234567890123456789012345678901234567890123456789012.example.com": [
        {
          "SPF": "v=spf1 -all"
        }
      ],
      "exp.example.net": [
        {
          "TXT": "%{l}"
        }
      ],
      "example.net": [
        {
          "SPF": "v=spf1 -all exp=exp.example.net"
        }
      ],
      "example.com": [
        "TIMEOUT"
      ],
      "hosed.example.com": [
        {
          "SPF": "v=spf1 a:\u00ef\u00bb\u00bfgarbage.example.net -all"
        }
      ],
      "fine.example.com": [
        {
          "TXT": "v=spf1 a  -all"
        }
      ],
      "a.example.net": [
        {
          "SPF": "v=spf1 -all exp=exp.example.net"
        }
      ],
      "hosed3.example.com": [
        {
          "SPF": "v=spf1 a:example.net \u0096all"
        }
      ]
    },
    "tests": {
      "domain-literal": {
        "spec": "4.3/1",
        "host": "1.2.3.5",
        "result": "none",
        "mailfrom": "foo@[1.2.3.5]",
        "helo": "OEMCOMPUTER"
      },
      "non-ascii-policy": {
        "host": "1.2.3.4",
        "description": "SPF policies are restricted to 7-bit ascii.",
        "mailfrom": "foobar@hosed.example.com",
        "spec": "3.1/1",
        "result": "permerror",
        "helo": "hosed"
      },
      "non-ascii-non-spf": {
        "comment": "Non-SPF related TXT records are none of our business.",
        "explanation": "DEFAULT",
        "description": "Non-ascii content in non-SPF related records.",
        "mailfrom": "foobar@nothosed.example.com",
        "spec": "4.5/1",
        "result": "fail",
        "helo": "hosed",
        "host": "1.2.3.4"
      },
      "control-char-policy": {
        "host": "192.0.2.3",
        "description": "Mechanisms are separated by spaces only, not any control char.",
        "mailfrom": "foobar@ctrl.example.com",
        "spec": "4.6.1/2",
        "result": "permerror",
        "helo": "hosed"
      },
      "two-spaces": {
        "host": "1.2.3.4",
        "description": "ABNF for term separation is one or more spaces, not just one.",
        "mailfrom": "actually@fine.example.com",
        "spec": "4.6.1",
        "result": "fail",
        "helo": "hosed"
      },
      "helo-not-fqdn": {
        "spec": "4.3/1",
        "host": "1.2.3.5",
        "result": "none",
        "mailfrom": "",
        "helo": "A2345678"
      },
      "emptylabel": {
        "spec": "4.3/1",
        "host": "1.2.3.5",
        "result": "none",
        "mailfrom": "lyme.eater@A...example.com",
        "helo": "mail.example.net"
      },
      "helo-domain-literal": {
        "spec": "4.3/1",
        "host": "1.2.3.5",
        "result": "none",
        "mailfrom": "",
        "helo": "[1.2.3.5]"
      },
      "non-ascii-mech": {
        "comment": "Checking a possibly different code path for non-ascii chars.",
        "host": "1.2.3.4",
        "description": "SPF policies are restricted to 7-bit ascii.",
        "mailfrom": "foobar@hosed2.example.com",
        "spec": "3.1/1",
        "result": "permerror",
        "helo": "hosed"
      },
      "toolonglabel": {
        "comment": "For initial processing, a long label results in None, not TempError",
        "host": "1.2.3.5",
        "description": "DNS labels limited to 63 chars.",
        "mailfrom": "lyme.eater@A123456789012345678901234567890123456789012345678901234567890123.example.com",
        "spec": "4.3/1",
        "result": "none",
        "helo": "mail.example.net"
      },
      "longlabel": {
        "host": "1.2.3.5",
        "description": "DNS labels limited to 63 chars.",
        "mailfrom": "lyme.eater@A12345678901234567890123456789012345678901234567890123456789012.example.com",
        "spec": "4.3/1",
        "result": "fail",
        "helo": "mail.example.net"
      },
      "non-ascii-result": {
        "comment": "Checking yet another code path for non-ascii chars.",
        "host": "1.2.3.4",
        "description": "SPF policies are restricted to 7-bit ascii.",
        "mailfrom": "foobar@hosed3.example.com",
        "spec": "3.1/1",
        "result": "permerror",
        "helo": "hosed"
      },
      "nolocalpart": {
        "host": "1.2.3.4",
        "mailfrom": "@example.net",
        "explanation": "postmaster",
        "spec": "4.3/2",
        "result": "fail",
        "helo": "mail.example.net"
      }
    }
  },
  {
    "description": "Record lookup",
    "zonedata": {
      "txttimeout.example.net": [
        {
          "SPF": "v=spf1 -all"
        },
        {
          "TXT": "NONE"
        },
        "TIMEOUT"
      ],
      "spftimeout.example.net": [
        {
          "TXT": "v=spf1 -all"
        },
        "TIMEOUT"
      ],
      "spfonly.example.net": [
        {
          "SPF": "v=spf1 -all"
        },
        {
          "TXT": "NONE"
        }
      ],
      "txtonly.example.net": [
        {
          "TXT": "v=spf1 -all"
        }
      ],
      "nospftxttimeout.example.net": [
        {
          "SPF": "v=spf3 !a:yahoo.com -all"
        },
        {
          "TXT": "NONE"
        },
        "TIMEOUT"
      ],
      "both.example.net": [
        {
          "TXT": "v=spf1 -all"
        },
        {
          "SPF": "v=spf1 -all"
        }
      ],
      "alltimeout.example.net": [
        "TIMEOUT"
      ]
    },
    "tests": {
      "nospftxttimeout": {
        "comment": "Because TXT records is where v=spf1 records will likely be, returning temperror will try again later.  A timeout due to a braindead server is unlikely in the case of TXT, as opposed to the newer SPF RR.",
        "host": "1.2.3.4",
        "description": "No SPF record present, and TXT lookup times out. If only TXT records are checked, result is temperror.",
        "mailfrom": "foo@nospftxttimeout.example.net",
        "spec": "4.4/1",
        "result": "temperror",
        "helo": "mail.example.net"
      },
      "alltimeout": {
        "host": "1.2.3.4",
        "description": "Both TXT and SPF queries time out",
        "mailfrom": "foo@alltimeout.example.net",
        "spec": "4.4/2",
        "result": "temperror",
        "helo": "mail.example.net"
      },
      "both": {
        "spec": "4.4/1",
        "host": "1.2.3.4",
        "result": "fail",
        "mailfrom": "foo@both.example.net",
        "helo": "mail.example.net"
      },
      "txttimeout": {
        "host": "1.2.3.4",
        "description": "SPF record present, but TXT lookup times out. If only TXT records are checked, result is temperror.",
        "mailfrom": "foo@txttimeout.example.net",
        "spec": "4.4/1",
        "result": "temperror",
        "helo": "mail.example.net"
      },
      "spftimeout": {
        "comment": "This actually happens for a popular braindead DNS server.",
        "host": "1.2.3.4",
        "description": "TXT record present, but SPF lookup times out. Result is temperror if checking SPF records only.  Fortunately, we don't do type SPF anymore.",
        "mailfrom": "foo@spftimeout.example.net",
        "spec": "4.4/1",
        "result": "fail",
        "helo": "mail.example.net"
      },
      "txtonly": {
        "host": "1.2.3.4",
        "description": "Result is none if checking SPF records only (which you should not be doing).",
        "mailfrom": "foo@txtonly.example.net",
        "spec": "4.4/1",
        "result": "fail",
        "helo": "mail.example.net"
      },
      "spfonly": {
        "host": "1.2.3.4",
        "description": "Result is none if checking TXT records only.",
        "mailfrom": "foo@spfonly.example.net",
        "spec": "4.4/1",
        "result": "none",
        "helo": "mail.example.net"
      }
    }
  },
  {
    "description": "Selecting records",
    "zonedata": {
      "example9.com": [
        {
          "SPF": "v=SpF1 ~all"
        }
      ],
      "example6.com": [
        {
          "SPF": "v=spf1 -all"
        },
        {
          "SPF": "V=sPf1 +all"
        }
      ],
      "mail.example1.com": [
        {
          "A": "1.2.3.4"
        }
      ],
      "example3.com": [
        {
          "SPF": "v=spf10"
        },
        {
          "SPF": "v=spf1 mx"
        },
        {
          "MX": [
            0,
            "mail.example1.com"
          ]
        }
      ],
      "example8.com": [
        {
          "SPF": "V=spf1 -all"
        },
        {
          "SPF": "v=spf1 -all"
        },
        {
          "TXT": "v=spf1 +all"
        }
      ],
      "example4.com": [
        {
          "SPF": "v=spf1 +all"
        },
        {
          "TXT": "v=spf1 -all"
        }
      ],
      "example2.com": [
        {
          "SPF": [
            "v=spf1",
            "mx"
          ]
        }
      ],
      "example1.com": [
        {
          "SPF": "v=spf1"
        }
      ],
      "example7.com": [
        {
          "SPF": "v=spf1 -all"
        },
        {
          "SPF": "v=spf1 -all"
        }
      ],
      "example5.com": [
        {
          "SPF": "v=spf1 +all"
        },
        {
          "TXT": "v=spf1 -all"
        },
        {
          "TXT": "v=spf1 +all"
        }
      ]
    },
    "tests": {
      "case-insensitive": {
        "host": "1.2.3.4",
        "description": "v=spf1 is case insensitive",
        "mailfrom": "foo@example9.com",
        "spec": "4.5/6",
        "result": "softfail",
        "helo": "mail.example1.com"
      },
      "multitxt1": {
        "host": "1.2.3.4",
        "description": "Implementations should give permerror/unknown because of the conflicting TXT records.",
        "mailfrom": "foo@example5.com",
        "spec": "4.5/5",
        "result": "permerror",
        "helo": "mail.example1.com"
      },
      "spfoverride": {
        "host": "1.2.3.4",
        "description": "SPF records no longer used.",
        "mailfrom": "foo@example4.com",
        "spec": "4.5/5",
        "result": "fail",
        "helo": "mail.example1.com"
      },
      "multispf1": {
        "host": "1.2.3.4",
        "description": "Multiple records is a permerror, even when they are identical. However, this situation cannot be reliably reproduced with live DNS since cache and resolvers are allowed to combine identical records.",
        "mailfrom": "foo@example7.com",
        "spec": "4.5/6",
        "result": [
          "permerror",
          "fail"
        ],
        "helo": "mail.example1.com"
      },
      "nospace2": {
        "spec": "4.5/4",
        "host": "1.2.3.4",
        "result": "pass",
        "mailfrom": "foo@example3.com",
        "helo": "mail.example1.com"
      },
      "nospf": {
        "spec": "4.5/7",
        "host": "1.2.3.4",
        "result": "none",
        "mailfrom": "foo@mail.example1.com",
        "helo": "mail.example1.com"
      },
      "empty": {
        "host": "1.2.3.4",
        "description": "Empty SPF record.",
        "mailfrom": "foo@example1.com",
        "spec": "4.5/4",
        "result": "neutral",
        "helo": "mail1.example1.com"
      },
      "multitxt2": {
        "host": "1.2.3.4",
        "description": "Multiple records is a permerror, v=spf1 is case insensitive",
        "mailfrom": "foo@example6.com",
        "spec": "4.5/6",
        "result": "permerror",
        "helo": "mail.example1.com"
      },
      "multispf2": {
        "host": "1.2.3.4",
        "description": "Ignoring SPF-type records will give pass because there is a (single) TXT record.",
        "mailfrom": "foo@example8.com",
        "spec": "4.5/6",
        "result": "pass",
        "helo": "mail.example1.com"
      },
      "nospace1": {
        "host": "1.2.3.4",
        "description": "Version must be terminated by space or end of record.  TXT pieces are joined without intervening spaces.",
        "mailfrom": "foo@example2.com",
        "spec": "4.5/4",
        "result": "none",
        "helo": "mail.example1.com"
      }
    }
  },
  {
    "description": "Record evaluation",
    "zonedata": {
      "t1.example.com": [
        {
          "SPF": "v=spf1 ip4:1.2.3.4 -all moo"
        }
      ],
      "t5.example.com": [
        {
          "SPF": "v=spf1 redirect=t5.example.com ~all"
        }
      ],
      "t3.example.com": [
        {
          "SPF": "v=spf1 moo.cow/far_out=man:dog/cat ip4:1.2.3.4 -all"
        }
      ],
      "t9.example.com": [
        {
          "SPF": "v=spf1 a:foo-bar -all"
        }
      ],
      "t11.example.com": [
        {
          "SPF": "v=spf1 a:a123456789012345678901234567890123456789012345678901234567890123.example.com -all"
        }
      ],
      "mail.example.com": [
        {
          "A": "1.2.3.4"
        }
      ],
      "t6.example.com": [
        {
          "SPF": "v=spf1 ip4:1.2.3.4 redirect=t2.example.com"
        }
      ],
      "t7.example.com": [
        {
          "SPF": "v=spf1 ip4:1.2.3.4"
        }
      ],
      "t12.example.com": [
        {
          "SPF": "v=spf1 a:%{H}.bar -all"
        }
      ],
      "t8.example.com": [
        {
          "SPF": "v=spf1 ip4:1.2.3.4 redirect:t2.example.com"
        }
      ],
      "t10.example.com": [
        {
          "SPF": "v=spf1 a:mail.example...com -all"
        }
      ],
      "t2.example.com": [
        {
          "SPF": "v=spf1 moo.cow-far_out=man:dog/cat ip4:1.2.3.4 -all"
        }
      ],
      "t4.example.com": [
        {
          "SPF": "v=spf1 moo.cow:far_out=man:dog/cat ip4:1.2.3.4 -all"
        }
      ]
    },
    "tests": {
      "default-result": {
        "host": "1.2.3.5",
        "description": "Default result is neutral.",
        "mailfrom": "foo@t7.example.com",
        "spec": "4.7/1",
        "result": "neutral",
        "helo": "mail.example.com"
      },
      "modifier-charset-bad2": {
        "host": "1.2.3.4",
        "description": "'=' character immediately after the name and before any \":\" or \"/\"",
        "mailfrom": "foo@t4.example.com",
        "spec": "4.6.1/4",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "invalid-domain-long": {
        "comment": "A domain label longer than 63 characters in a mechanism target-name is valid domain-spec syntax (perhaps formed from a macro expansion), even though a DNS query cannot be composed from it.  The spec being unclear about it, this could either be considered a syntax error, or, by analogy to 4.3/1 and 5/10/3, the mechanism could be treated as a no-match.  RFC 7208 failed to agree on which result to use, and declares the situation undefined.  The preferred test result is therefore a matter of opinion.",
        "host": "1.2.3.4",
        "description": "target-name that is a valid domain-spec per RFC 4408 and RFC 7208 but an invalid domain name per RFC 1035 (long label) must be treated as non-existent.",
        "mailfrom": "foo@t11.example.com",
        "spec": "4.3/1, 4.8/5, 5/10/3",
        "result": [
          "fail",
          "permerror"
        ],
        "helo": "mail.example.com"
      },
      "modifier-charset-bad1": {
        "host": "1.2.3.4",
        "description": "'=' character immediately after the name and before any \":\" or \"/\"",
        "mailfrom": "foo@t3.example.com",
        "spec": "4.6.1/4",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "detect-errors-anywhere": {
        "host": "1.2.3.4",
        "description": "Any syntax errors anywhere in the record MUST be detected.",
        "mailfrom": "foo@t1.example.com",
        "spec": 4.6,
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "redirect-is-modifier": {
        "host": "1.2.3.4",
        "description": "Invalid mechanism.  Redirect is a modifier.",
        "mailfrom": "foo@t8.example.com",
        "spec": "4.6.1/4",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "redirect-after-mechanisms1": {
        "comment": "The redirect in this example would violate processing limits, except that it is never used because of the all mechanism.",
        "host": "1.2.3.4",
        "description": "The \"redirect\" modifier has an effect after all the mechanisms.",
        "mailfrom": "foo@t5.example.com",
        "spec": "4.6.3",
        "result": "softfail",
        "helo": "mail.example.com"
      },
      "invalid-domain-empty-label": {
        "comment": "An empty domain label, i.e. two successive dots, in a mechanism target-name is valid domain-spec syntax (perhaps formed from a macro expansion), even though a DNS query cannot be composed from it.  The spec being unclear about it, this could either be considered a syntax error, or, by analogy to 4.3/1 and 5/10/3, the mechanism could be treated as a no-match.  RFC 7208 failed to agree on which result to use, and declares the situation undefined.  The preferred test result is therefore a matter of opinion.",
        "host": "1.2.3.4",
        "description": "target-name that is a valid domain-spec per RFC 4408 and RFC 7208 but an invalid domain name per RFC 1035 (empty label) should be treated as non-existent.",
        "mailfrom": "foo@t10.example.com",
        "spec": "4.3/1, 4.8/5, 5/10/3",
        "result": [
          "fail",
          "permerror"
        ],
        "helo": "mail.example.com"
      },
      "invalid-domain": {
        "host": "1.2.3.4",
        "description": "Domain-spec must end in macro-expand or valid toplabel.",
        "mailfrom": "foo@t9.example.com",
        "spec": "7.1/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "modifier-charset-good": {
        "host": "1.2.3.4",
        "description": "name = ALPHA *( ALPHA / DIGIT / \"-\" / \"_\" / \".\" )",
        "mailfrom": "foo@t2.example.com",
        "spec": "4.6.1/2",
        "result": "pass",
        "helo": "mail.example.com"
      },
      "redirect-after-mechanisms2": {
        "host": "1.2.3.5",
        "description": "The \"redirect\" modifier has an effect after all the mechanisms.",
        "mailfrom": "foo@t6.example.com",
        "spec": "4.6.3",
        "result": "fail",
        "helo": "mail.example.com"
      },
      "invalid-domain-long-via-macro": {
        "comment": "A domain label longer than 63 characters that results from macro expansion in a mechanism target-name is valid domain-spec syntax (and is not even subject to syntax checking after macro expansion), even though a DNS query cannot be composed from it.  The spec being unclear about it, this could either be considered a syntax error, or, by analogy to 4.3/1 and 5/10/3, the mechanism could be treated as a no-match.  RFC 7208 failed to agree on which result to use, and declares the situation undefined.  The preferred test result is therefore a matter of opinion.",
        "host": "1.2.3.4",
        "description": "target-name that is a valid domain-spec per RFC 4408 and RFC 7208 but an invalid domain name per RFC 1035 (long label) must be treated as non-existent.",
        "mailfrom": "foo@t12.example.com",
        "spec": "4.3/1, 4.8/5, 5/10/3",
        "result": [
          "fail",
          "permerror"
        ],
        "helo": "%%%%%%%%%%%%%%%%%%%%%%"
      }
    }
  },
  {
    "description": "ALL mechanism syntax",
    "zonedata": {
      "e3.example.com": [
        {
          "SPF": "v=spf1 -all/8"
        }
      ],
      "e1.example.com": [
        {
          "SPF": "v=spf1 -all."
        }
      ],
      "e5.example.com": [
        {
          "SPF": "v=spf1 all -all"
        }
      ],
      "e4.example.com": [
        {
          "SPF": "v=spf1 ?all"
        }
      ],
      "mail.example.com": [
        {
          "A": "1.2.3.4"
        }
      ],
      "e2.example.com": [
        {
          "SPF": "v=spf1 -all:foobar"
        }
      ]
    },
    "tests": {
      "all-neutral": {
        "host": "1.2.3.4",
        "description": "all              = \"all\"\n",
        "mailfrom": "foo@e4.example.com",
        "spec": "5.1/1",
        "result": "neutral",
        "helo": "mail.example.com"
      },
      "all-dot": {
        "comment": "At least one implementation got this wrong",
        "host": "1.2.3.4",
        "description": "all              = \"all\"\n",
        "mailfrom": "foo@e1.example.com",
        "spec": "5.1/1",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "all-cidr": {
        "host": "1.2.3.4",
        "description": "all              = \"all\"\n",
        "mailfrom": "foo@e3.example.com",
        "spec": "5.1/1",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "all-arg": {
        "comment": "At least one implementation got this wrong",
        "host": "1.2.3.4",
        "description": "all              = \"all\"\n",
        "mailfrom": "foo@e2.example.com",
        "spec": "5.1/1",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "all-double": {
        "host": "1.2.3.4",
        "description": "all              = \"all\"\n",
        "mailfrom": "foo@e5.example.com",
        "spec": "5.1/1",
        "result": "pass",
        "helo": "mail.example.com"
      }
    }
  },
  {
    "description": "PTR mechanism syntax",
    "zonedata": {
      "e5.example.com": [
        {
          "SPF": "v=spf1 ptr:"
        }
      ],
      "e2.example.com": [
        {
          "SPF": "v=spf1 ptr:example.com -all"
        }
      ],
      "e1.example.com": [
        {
          "SPF": "v=spf1 ptr/0 -all"
        }
      ],
      "4.3.2.1.in-addr.arpa": [
        {
          "PTR": "e3.example.com"
        },
        {
          "PTR": "e4.example.com"
        },
        {
          "PTR": "mail.example.com"
        }
      ],
      "e3.example.com": [
        {
          "SPF": "v=spf1 ptr -all"
        },
        {
          "A": "1.2.3.4"
        },
        {
          "AAAA": "CAFE:BABE::1"
        }
      ],
      "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.E.B.A.B.E.F.A.C.ip6.arpa": [
        {
          "PTR": "e3.example.com"
        }
      ],
      "e4.example.com": [
        {
          "SPF": "v=spf1 ptr -all"
        }
      ],
      "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.b.D.0.1.0.0.2.ip6.arpa": [
        {
          "PTR": "mail.example.com"
        }
      ],
      "mail.example.com": [
        {
          "A": "1.2.3.4"
        },
        {
          "AAAA": "2001:db8::1"
        }
      ],
      "e6.example.com": [
        {
          "SPF": "v=spf1 ptr:Example.com -all"
        }
      ]
    },
    "tests": {
      "ptr-nomatch-invalid": {
        "comment": "This PTR record does not validate",
        "host": "1.2.3.4",
        "description": "Check all validated domain names to see if they end in the <target-name> domain.",
        "mailfrom": "foo@e4.example.com",
        "spec": "5.5/5",
        "result": "fail",
        "helo": "mail.example.com"
      },
      "ptr-cidr": {
        "host": "1.2.3.4",
        "description": "PTR              = \"ptr\"    [ \":\" domain-spec ]",
        "mailfrom": "foo@e1.example.com",
        "spec": "5.5/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "ptr-case-change": {
        "comment": "Some DNS servers have random case in the domain part of returned answers, especially for PTR records.  For example, a query for 1.2.6.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.E.F.0.0.4.F.1.1.1.0.1.0.A.2.ip6.arpa may return 1.2.6.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.E.F.0.0.4.F.1.1.1.0.1.0.a.2.ip6.arpa",
        "host": "2001:db8::1",
        "description": "arpa domain is case insensitive.",
        "mailfrom": "bar@e6.example.com",
        "spec": "5.5/2",
        "result": "pass",
        "helo": "mail.example.com"
      },
      "ptr-match-ip6": {
        "host": "CAFE:BABE::1",
        "description": "Check all validated domain names to see if they end in the <target-name> domain.",
        "mailfrom": "foo@e3.example.com",
        "spec": "5.5/5",
        "result": "pass",
        "helo": "mail.example.com"
      },
      "ptr-match-target": {
        "host": "1.2.3.4",
        "description": "Check all validated domain names to see if they end in the <target-name> domain.",
        "mailfrom": "foo@e2.example.com",
        "spec": "5.5/5",
        "result": "pass",
        "helo": "mail.example.com"
      },
      "ptr-empty-domain": {
        "host": "1.2.3.4",
        "description": "domain-spec cannot be empty.",
        "mailfrom": "foo@e5.example.com",
        "spec": "5.5/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "ptr-match-implicit": {
        "host": "1.2.3.4",
        "description": "Check all validated domain names to see if they end in the <target-name> domain.",
        "mailfrom": "foo@e3.example.com",
        "spec": "5.5/5",
        "result": "pass",
        "helo": "mail.example.com"
      }
    }
  },
  {
    "description": "A mechanism syntax",
    "zonedata": {
      "e2a.example.com": [
        {
          "AAAA": "1234::1"
        },
        {
          "SPF": "v=spf1 a//0 -all"
        }
      ],
      "e5.example.com": [
        {
          "SPF": "v=spf1 a:abc.123"
        }
      ],
      "e9.example.com": [
        {
          "SPF": "v=spf1 a:example.com:8080"
        }
      ],
      "e1.example.com": [
        {
          "SPF": "v=spf1 a/0 -all"
        }
      ],
      "e2.example.com": [
        {
          "A": "1.1.1.1"
        },
        {
          "AAAA": "1234::2"
        },
        {
          "SPF": "v=spf1 a/0 -all"
        }
      ],
      "foo.example.xn--zckzah": [
        {
          "A": "1.2.3.4"
        }
      ],
      "e3.example.com": [
        {
          "SPF": "v=spf1 a:foo.example.com\u0000"
        }
      ],
      "e5b.example.com": [
        {
          "SPF": "v=spf1 a:museum."
        }
      ],
      "e11.example.com": [
        {
          "SPF": "v=spf1 a:foo:bar/baz.example.com"
        }
      ],
      "e8a.example.com": [
        {
          "A": "1.2.3.5"
        },
        {
          "AAAA": "2001:db8:1234::dead:beef"
        },
        {
          "SPF": "v=spf1 a/24 -all"
        }
      ],
      "e8e.example.com": [
        {
          "A": "1.2.3.5"
        },
        {
          "AAAA": "2001:db8:1234::dead:beef"
        },
        {
          "SPF": "v=spf1 a/24/64 -all"
        }
      ],
      "foo:bar/baz.example.com": [
        {
          "A": "1.2.3.4"
        }
      ],
      "e12.example.com": [
        {
          "SPF": "v=spf1 a:example.-com"
        }
      ],
      "mail.example.com": [
        {
          "A": "1.2.3.4"
        }
      ],
      "ipv6.example.com": [
        {
          "AAAA": "1234::1"
        },
        {
          "A": "1.1.1.1"
        },
        {
          "SPF": "v=spf1 a -all"
        }
      ],
      "e8.example.com": [
        {
          "A": "1.2.3.5"
        },
        {
          "AAAA": "2001:db8:1234::dead:beef"
        },
        {
          "SPF": "v=spf1 a/24//64 -all"
        }
      ],
      "foo.example.com": [
        {
          "A": "1.1.1.1"
        },
        {
          "A": "1.2.3.5"
        }
      ],
      "e4.example.com": [
        {
          "SPF": "v=spf1 a:111.222.33.44"
        }
      ],
      "e2b.example.com": [
        {
          "A": "1.1.1.1"
        },
        {
          "SPF": "v=spf1 a//0 -all"
        }
      ],
      "e5a.example.com": [
        {
          "SPF": "v=spf1 a:museum"
        }
      ],
      "e8b.example.com": [
        {
          "A": "1.2.3.5"
        },
        {
          "AAAA": "2001:db8:1234::dead:beef"
        },
        {
          "SPF": "v=spf1 a//64 -all"
        }
      ],
      "e6a.example.com": [
        {
          "SPF": "v=spf1 a/33 -all"
        }
      ],
      "e13.example.com": [
        {
          "SPF": "v=spf1 a:"
        }
      ],
      "e10.example.com": [
        {
          "SPF": "v=spf1 a:foo.example.com/24"
        }
      ],
      "e14.example.com": [
        {
          "SPF": "v=spf1 a:foo.example.xn--zckzah -all"
        }
      ],
      "e7.example.com": [
        {
          "SPF": "v=spf1 a//129 -all"
        }
      ],
      "e6.example.com": [
        {
          "SPF": "v=spf1 a//33 -all"
        }
      ]
    },
    "tests": {
      "a-bad-cidr4": {
        "host": "1.2.3.4",
        "description": "A                = \"a\"      [ \":\" domain-spec ] [ dual-cidr-length ]\ndual-cidr-length = [ ip4-cidr-length ] [ \"/\" ip6-cidr-length ]\n",
        "mailfrom": "foo@e6a.example.com",
        "spec": "5.3/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "a-cidr6-0-nxdomain": {
        "host": "1234::1",
        "description": "No match if no AAAA records are present in DNS.",
        "mailfrom": "foo@e2b.example.com",
        "spec": "5.3/3",
        "result": "fail",
        "helo": "mail.example.com"
      },
      "a-null": {
        "host": "1.2.3.5",
        "description": "Null octets not allowed in toplabel",
        "mailfrom": "foo@e3.example.com",
        "spec": "7.1/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "a-cidr6-0-ip4": {
        "host": "1.2.3.4",
        "description": "Would match if any AAAA records are present in DNS, but not for an IP4 connection.",
        "mailfrom": "foo@e2a.example.com",
        "spec": "5.3/3",
        "result": "fail",
        "helo": "mail.example.com"
      },
      "a-cidr4-0-ip6": {
        "host": "1234::1",
        "description": "Matches if any A records are present in DNS.",
        "mailfrom": "foo@e2.example.com",
        "spec": "5.3/3",
        "result": "fail",
        "helo": "mail.example.com"
      },
      "a-dual-cidr-ip6-default": {
        "host": "2001:db8:1234::cafe:babe",
        "description": "A                = \"a\"      [ \":\" domain-spec ] [ dual-cidr-length ]\ndual-cidr-length = [ ip4-cidr-length ] [ \"/\" ip6-cidr-length ]\n",
        "mailfrom": "foo@e8a.example.com",
        "spec": "5.3/2",
        "result": "fail",
        "helo": "mail.example.com"
      },
      "a-empty-domain": {
        "host": "1.2.3.4",
        "description": "domain-spec cannot be empty.",
        "mailfrom": "foo@e13.example.com",
        "spec": "5.3/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "a-cidr4-0": {
        "host": "1.2.3.4",
        "description": "Matches if any A records are present in DNS.",
        "mailfrom": "foo@e2.example.com",
        "spec": "5.3/3",
        "result": "pass",
        "helo": "mail.example.com"
      },
      "a-nxdomain": {
        "host": "1.2.3.4",
        "description": "If no ips are returned, A mechanism does not match, even with /0.",
        "mailfrom": "foo@e1.example.com",
        "spec": "5.3/3",
        "result": "fail",
        "helo": "mail.example.com"
      },
      "a-dual-cidr-ip4-err": {
        "host": "1.2.3.4",
        "description": "A                = \"a\"      [ \":\" domain-spec ] [ dual-cidr-length ]\ndual-cidr-length = [ ip4-cidr-length ] [ \"/\" ip6-cidr-length ]\n",
        "mailfrom": "foo@e8e.example.com",
        "spec": "5.3/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "a-colon-domain": {
        "host": "1.2.3.4",
        "description": "domain-spec may contain any visible char except %",
        "mailfrom": "foo@e11.example.com",
        "spec": "7.1/2",
        "result": "pass",
        "helo": "mail.example.com"
      },
      "a-dual-cidr-ip6-match": {
        "host": "2001:db8:1234::cafe:babe",
        "description": "A                = \"a\"      [ \":\" domain-spec ] [ dual-cidr-length ]\ndual-cidr-length = [ ip4-cidr-length ] [ \"/\" ip6-cidr-length ]\n",
        "mailfrom": "foo@e8.example.com",
        "spec": "5.3/2",
        "result": "pass",
        "helo": "mail.example.com"
      },
      "a-multi-ip2": {
        "host": "1.2.3.4",
        "description": "A matches any returned IP.",
        "mailfrom": "foo@e10.example.com",
        "spec": "5.3/3",
        "result": "pass",
        "helo": "mail.example.com"
      },
      "a-cidr6-0-ip4mapped": {
        "host": "::FFFF:1.2.3.4",
        "description": "Would match if any AAAA records are present in DNS, but not for an IP4 connection.",
        "mailfrom": "foo@e2a.example.com",
        "spec": "5.3/3",
        "result": "fail",
        "helo": "mail.example.com"
      },
      "a-ip6-dualstack": {
        "host": "1234::1",
        "description": "Simple IP6 Address match with dual stack.",
        "mailfrom": "foo@ipv6.example.com",
        "spec": "5.3/3",
        "result": "pass",
        "helo": "mail.example.com"
      },
      "a-dash-in-toplabel": {
        "comment": "Going from the \"toplabel\" grammar definition, an implementation using regular expressions in incrementally parsing SPF records might erroneously try to match a TLD such as \".xn--zckzah\" (cf. IDN TLDs!) to '( *alphanum ALPHA *alphanum )' first before trying the alternative '( 1*alphanum \"-\" *( alphanum / \"-\" ) alphanum )', essentially causing a non-greedy, and thus, incomplete match.  Make sure a greedy match is performed!",
        "host": "1.2.3.4",
        "description": "toplabel may contain dashes",
        "mailfrom": "foo@e14.example.com",
        "spec": "7.1/2",
        "result": "pass",
        "helo": "mail.example.com"
      },
      "a-numeric-toplabel": {
        "host": "1.2.3.4",
        "description": "toplabel may not be all numeric",
        "mailfrom": "foo@e5.example.com",
        "spec": "7.1/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "a-bad-cidr6": {
        "host": "1.2.3.4",
        "description": "A                = \"a\"      [ \":\" domain-spec ] [ dual-cidr-length ]\ndual-cidr-length = [ ip4-cidr-length ] [ \"/\" ip6-cidr-length ]\n",
        "mailfrom": "foo@e7.example.com",
        "spec": "5.3/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "a-numeric": {
        "comment": "A common publishing mistake is using ip4 addresses with A mechanism. This should receive special diagnostic attention in the permerror.",
        "host": "1.2.3.4",
        "description": "toplabel may not be all numeric",
        "mailfrom": "foo@e4.example.com",
        "spec": "7.1/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "a-colon-domain-ip4mapped": {
        "host": "::FFFF:1.2.3.4",
        "description": "domain-spec may contain any visible char except %",
        "mailfrom": "foo@e11.example.com",
        "spec": "7.1/2",
        "result": "pass",
        "helo": "mail.example.com"
      },
      "a-cidr6-0-ip6": {
        "host": "1234::1",
        "description": "Matches if any AAAA records are present in DNS.",
        "mailfrom": "foo@e2a.example.com",
        "spec": "5.3/3",
        "result": "pass",
        "helo": "mail.example.com"
      },
      "a-bad-domain": {
        "host": "1.2.3.4",
        "description": "domain-spec must pass basic syntax checks; a ':' may appear in domain-spec, but not in top-label",
        "mailfrom": "foo@e9.example.com",
        "spec": "7.1/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "a-bad-toplabel": {
        "host": "1.2.3.4",
        "description": "toplabel may not begin with a dash",
        "mailfrom": "foo@e12.example.com",
        "spec": "7.1/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "a-only-toplabel": {
        "host": "1.2.3.4",
        "description": "domain-spec may not consist of only a toplabel.",
        "mailfrom": "foo@e5a.example.com",
        "spec": "7.1/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "a-cidr6": {
        "host": "1.2.3.4",
        "description": "A                = \"a\"      [ \":\" domain-spec ] [ dual-cidr-length ]\ndual-cidr-length = [ ip4-cidr-length ] [ \"/\" ip6-cidr-length ]\n",
        "mailfrom": "foo@e6.example.com",
        "spec": "5.3/2",
        "result": "fail",
        "helo": "mail.example.com"
      },
      "a-only-toplabel-trailing-dot": {
        "comment": "\"A trailing dot doesn't help.\"",
        "host": "1.2.3.4",
        "description": "domain-spec may not consist of only a toplabel.",
        "mailfrom": "foo@e5b.example.com",
        "spec": "7.1/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "a-dual-cidr-ip4-default": {
        "host": "1.2.3.4",
        "description": "A                = \"a\"      [ \":\" domain-spec ] [ dual-cidr-length ]\ndual-cidr-length = [ ip4-cidr-length ] [ \"/\" ip6-cidr-length ]\n",
        "mailfrom": "foo@e8b.example.com",
        "spec": "5.3/2",
        "result": "fail",
        "helo": "mail.example.com"
      },
      "a-dual-cidr-ip4-match": {
        "host": "1.2.3.4",
        "description": "A                = \"a\"      [ \":\" domain-spec ] [ dual-cidr-length ]\ndual-cidr-length = [ ip4-cidr-length ] [ \"/\" ip6-cidr-length ]\n",
        "mailfrom": "foo@e8.example.com",
        "spec": "5.3/2",
        "result": "pass",
        "helo": "mail.example.com"
      },
      "a-multi-ip1": {
        "host": "1.2.3.4",
        "description": "A matches any returned IP.",
        "mailfrom": "foo@e10.example.com",
        "spec": "5.3/3",
        "result": "pass",
        "helo": "mail.example.com"
      }
    }
  },
  {
    "description": "Include mechanism semantics and syntax",
    "zonedata": {
      "e1.example.com": [
        {
          "SPF": "v=spf1 include:ip5.example.com ~all"
        }
      ],
      "ip5.example.com": [
        {
          "SPF": "v=spf1 ip4:1.2.3.5 -all"
        }
      ],
      "e7.example.com": [
        {
          "SPF": "v=spf1 include:erehwon.example.com -all"
        }
      ],
      "e5.example.com": [
        {
          "SPF": "v=spf1 include:e6.example.com -all"
        }
      ],
      "ip8.example.com": [
        "TIMEOUT"
      ],
      "ip6.example.com": [
        {
          "SPF": "v=spf1 ip4:1.2.3.6 ~all"
        }
      ],
      "ip7.example.com": [
        {
          "SPF": "v=spf1 ip4:1.2.3.7 ?all"
        }
      ],
      "e2.example.com": [
        {
          "SPF": "v=spf1 include:ip6.example.com all"
        }
      ],
      "e3.example.com": [
        {
          "SPF": "v=spf1 include:ip7.example.com -all"
        }
      ],
      "e9.example.com": [
        {
          "SPF": "v=spf1 include:ip5.example.com/24 -all"
        }
      ],
      "e4.example.com": [
        {
          "SPF": "v=spf1 include:ip8.example.com -all"
        }
      ],
      "erehwon.example.com": [
        {
          "TXT": "v=spfl am not an SPF record"
        }
      ],
      "mail.example.com": [
        {
          "A": "1.2.3.4"
        }
      ],
      "e8.example.com": [
        {
          "SPF": "v=spf1 include: -all"
        }
      ],
      "e6.example.com": [
        {
          "SPF": "v=spf1 include +all"
        }
      ]
    },
    "tests": {
      "include-softfail": {
        "host": "1.2.3.4",
        "description": "recursive check_host() result of softfail causes include to not match.",
        "mailfrom": "foo@e2.example.com",
        "spec": "5.2/9",
        "result": "pass",
        "helo": "mail.example.com"
      },
      "include-permerror": {
        "host": "1.2.3.4",
        "description": "recursive check_host() result of permerror causes include to permerror",
        "mailfrom": "foo@e5.example.com",
        "spec": "5.2/9",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "include-temperror": {
        "host": "1.2.3.4",
        "description": "recursive check_host() result of temperror causes include to temperror",
        "mailfrom": "foo@e4.example.com",
        "spec": "5.2/9",
        "result": "temperror",
        "helo": "mail.example.com"
      },
      "include-neutral": {
        "host": "1.2.3.4",
        "description": "recursive check_host() result of neutral causes include to not match.",
        "mailfrom": "foo@e3.example.com",
        "spec": "5.2/9",
        "result": "fail",
        "helo": "mail.example.com"
      },
      "include-none": {
        "host": "1.2.3.4",
        "description": "recursive check_host() result of none causes include to permerror",
        "mailfrom": "foo@e7.example.com",
        "spec": "5.2/9",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "include-cidr": {
        "host": "1.2.3.4",
        "description": "include          = \"include\"  \":\" domain-spec",
        "mailfrom": "foo@e9.example.com",
        "spec": "5.2/1",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "include-empty-domain": {
        "host": "1.2.3.4",
        "description": "domain-spec cannot be empty.",
        "mailfrom": "foo@e8.example.com",
        "spec": "5.2/1",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "include-syntax-error": {
        "host": "1.2.3.4",
        "description": "include          = \"include\"  \":\" domain-spec",
        "mailfrom": "foo@e6.example.com",
        "spec": "5.2/1",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "include-fail": {
        "host": "1.2.3.4",
        "description": "recursive check_host() result of fail causes include to not match.",
        "mailfrom": "foo@e1.example.com",
        "spec": "5.2/9",
        "result": "softfail",
        "helo": "mail.example.com"
      }
    }
  },
  {
    "description": "MX mechanism syntax",
    "zonedata": {
      "e2a.example.com": [
        {
          "AAAA": "1234::1"
        },
        {
          "MX": [
            0,
            "e2a.example.com"
          ]
        },
        {
          "SPF": "v=spf1 mx//0 -all"
        }
      ],
      "e5.example.com": [
        {
          "SPF": "v=spf1 mx:abc.123"
        }
      ],
      "e9.example.com": [
        {
          "SPF": "v=spf1 mx:example.com:8080"
        }
      ],
      "e1.example.com": [
        {
          "SPF": "v=spf1 mx/0 -all"
        },
        {
          "MX": [
            0,
            "e1.example.com"
          ]
        }
      ],
      "e2.example.com": [
        {
          "A": "1.1.1.1"
        },
        {
          "AAAA": "1234::2"
        },
        {
          "MX": [
            0,
            "e2.example.com"
          ]
        },
        {
          "SPF": "v=spf1 mx/0 -all"
        }
      ],
      "e3.example.com": [
        {
          "SPF": "v=spf1 mx:foo.example.com\u0000"
        }
      ],
      "e4.example.com": [
        {
          "SPF": "v=spf1 mx"
        },
        {
          "A": "1.2.3.4"
        }
      ],
      "foo1.example.com": [
        {
          "A": "1.1.1.1"
        },
        {
          "A": "1.2.3.5"
        }
      ],
      "e11.example.com": [
        {
          "SPF": "v=spf1 mx:foo:bar/baz.example.com"
        }
      ],
      "e6a.example.com": [
        {
          "SPF": "v=spf1 mx/33 -all"
        }
      ],
      "foo:bar/baz.example.com": [
        {
          "MX": [
            0,
            "foo:bar/baz.example.com"
          ]
        },
        {
          "A": "1.2.3.4"
        }
      ],
      "e12.example.com": [
        {
          "SPF": "v=spf1 mx:example.-com"
        }
      ],
      "foo.example.com": [
        {
          "MX": [
            0,
            "foo1.example.com"
          ]
        }
      ],
      "e2b.example.com": [
        {
          "A": "1.1.1.1"
        },
        {
          "MX": [
            0,
            "e2b.example.com"
          ]
        },
        {
          "SPF": "v=spf1 mx//0 -all"
        }
      ],
      "e13.example.com": [
        {
          "SPF": "v=spf1 mx: -all"
        }
      ],
      "e10.example.com": [
        {
          "SPF": "v=spf1 mx:foo.example.com/24"
        }
      ],
      "mail.example.com": [
        {
          "A": "1.2.3.4"
        },
        {
          "MX": [
            0,
            ""
          ]
        },
        {
          "SPF": "v=spf1 mx"
        }
      ],
      "e7.example.com": [
        {
          "SPF": "v=spf1 mx//129 -all"
        }
      ],
      "e6.example.com": [
        {
          "SPF": "v=spf1 mx//33 -all"
        }
      ]
    },
    "tests": {
      "mx-bad-cidr4": {
        "host": "1.2.3.4",
        "description": "MX                = \"mx\"      [ \":\" domain-spec ] [ dual-cidr-length ]\ndual-cidr-length = [ ip4-cidr-length ] [ \"/\" ip6-cidr-length ]\n",
        "mailfrom": "foo@e6a.example.com",
        "spec": "5.4/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "mx-bad-cidr6": {
        "host": "1.2.3.4",
        "description": "MX                = \"mx\"      [ \":\" domain-spec ] [ dual-cidr-length ]\ndual-cidr-length = [ ip4-cidr-length ] [ \"/\" ip6-cidr-length ]\n",
        "mailfrom": "foo@e7.example.com",
        "spec": "5.4/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "mx-nxdomain": {
        "host": "1.2.3.4",
        "description": "If no ips are returned, MX mechanism does not match, even with /0.",
        "mailfrom": "foo@e1.example.com",
        "spec": "5.4/3",
        "result": "fail",
        "helo": "mail.example.com"
      },
      "mx-cidr4-0": {
        "host": "1.2.3.4",
        "description": "Matches if any A records for any MX records are present in DNS.",
        "mailfrom": "foo@e2.example.com",
        "spec": "5.4/3",
        "result": "pass",
        "helo": "mail.example.com"
      },
      "mx-empty": {
        "comment": "Some implementations have had trouble with null MX",
        "host": "1.2.3.4",
        "description": "test null MX",
        "mailfrom": "",
        "spec": "5.4/3",
        "result": "neutral",
        "helo": "mail.example.com"
      },
      "mx-bad-domain": {
        "comment": "A ':' may appear in domain-spec, but not in top-label.",
        "host": "1.2.3.4",
        "description": "domain-spec must pass basic syntax checks",
        "mailfrom": "foo@e9.example.com",
        "spec": "7.1/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "mx-cidr4-0-ip6": {
        "comment": "The IP6 CIDR starts with a double slash.",
        "host": "1234::1",
        "description": "cidr4 doesn't apply to IP6 connections.",
        "mailfrom": "foo@e2.example.com",
        "spec": "5.4/3",
        "result": "fail",
        "helo": "mail.example.com"
      },
      "mx-null": {
        "host": "1.2.3.5",
        "description": "Null not allowed in top-label.",
        "mailfrom": "foo@e3.example.com",
        "spec": "7.1/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "mx-multi-ip2": {
        "host": "1.2.3.4",
        "description": "MX matches any returned IP.",
        "mailfrom": "foo@e10.example.com",
        "spec": "5.4/3",
        "result": "pass",
        "helo": "mail.example.com"
      },
      "mx-cidr6": {
        "host": "1.2.3.4",
        "description": "MX                = \"mx\"      [ \":\" domain-spec ] [ dual-cidr-length ]\ndual-cidr-length = [ ip4-cidr-length ] [ \"/\" ip6-cidr-length ]\n",
        "mailfrom": "foo@e6.example.com",
        "spec": "5.4/2",
        "result": "fail",
        "helo": "mail.example.com"
      },
      "mx-cidr6-0-ip4mapped": {
        "host": "::FFFF:1.2.3.4",
        "description": "Would match if any AAAA records for MX records are present in DNS, but not for an IP4 connection.",
        "mailfrom": "foo@e2a.example.com",
        "spec": "5.4/3",
        "result": "fail",
        "helo": "mail.example.com"
      },
      "mx-cidr6-0-nxdomain": {
        "host": "1234::1",
        "description": "No match if no AAAA records for any MX records are present in DNS.",
        "mailfrom": "foo@e2b.example.com",
        "spec": "5.4/3",
        "result": "fail",
        "helo": "mail.example.com"
      },
      "mx-multi-ip1": {
        "host": "1.2.3.4",
        "description": "MX matches any returned IP.",
        "mailfrom": "foo@e10.example.com",
        "spec": "5.4/3",
        "result": "pass",
        "helo": "mail.example.com"
      },
      "mx-colon-domain-ip4mapped": {
        "host": "::FFFF:1.2.3.4",
        "description": "Domain-spec may contain any visible char except %",
        "mailfrom": "foo@e11.example.com",
        "spec": "7.1/2",
        "result": "pass",
        "helo": "mail.example.com"
      },
      "mx-numeric-top-label": {
        "host": "1.2.3.4",
        "description": "Top-label may not be all numeric",
        "mailfrom": "foo@e5.example.com",
        "spec": "7.1/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "mx-colon-domain": {
        "host": "1.2.3.4",
        "description": "Domain-spec may contain any visible char except %",
        "mailfrom": "foo@e11.example.com",
        "spec": "7.1/2",
        "result": "pass",
        "helo": "mail.example.com"
      },
      "mx-cidr6-0-ip6": {
        "host": "1234::1",
        "description": "Matches if any AAAA records for any MX records are present in DNS.",
        "mailfrom": "foo@e2a.example.com",
        "spec": "5.3/3",
        "result": "pass",
        "helo": "mail.example.com"
      },
      "mx-cidr6-0-ip4": {
        "host": "1.2.3.4",
        "description": "Would match if any AAAA records for MX records are present in DNS, but not for an IP4 connection.",
        "mailfrom": "foo@e2a.example.com",
        "spec": "5.4/3",
        "result": "fail",
        "helo": "mail.example.com"
      },
      "mx-bad-toplab": {
        "host": "1.2.3.4",
        "description": "Toplabel may not begin with -",
        "mailfrom": "foo@e12.example.com",
        "spec": "7.1/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "mx-implicit": {
        "host": "1.2.3.4",
        "description": "If the target name has no MX records, check_host() MUST NOT pretend the target is its single MX, and MUST NOT default to an A lookup on the target-name directly.",
        "mailfrom": "foo@e4.example.com",
        "spec": "5.4/4",
        "result": "neutral",
        "helo": "mail.example.com"
      },
      "mx-empty-domain": {
        "host": "1.2.3.4",
        "description": "domain-spec cannot be empty.",
        "mailfrom": "foo@e13.example.com",
        "spec": "5.2/1",
        "result": "permerror",
        "helo": "mail.example.com"
      }
    }
  },
  {
    "description": "EXISTS mechanism syntax",
    "zonedata": {
      "err.example.com": [
        "TIMEOUT"
      ],
      "e5.example.com": [
        {
          "SPF": "v=spf1 exists:mail6.example.com -all"
        }
      ],
      "e1.example.com": [
        {
          "SPF": "v=spf1 exists:"
        }
      ],
      "e2.example.com": [
        {
          "SPF": "v=spf1 exists"
        }
      ],
      "e3.example.com": [
        {
          "SPF": "v=spf1 exists:mail.example.com/24"
        }
      ],
      "e4.example.com": [
        {
          "SPF": "v=spf1 exists:mail.example.com"
        }
      ],
      "mail.example.com": [
        {
          "A": "1.2.3.4"
        }
      ],
      "e6.example.com": [
        {
          "SPF": "v=spf1 exists:err.example.com -all"
        }
      ],
      "mail6.example.com": [
        {
          "AAAA": "CAFE:BABE::4"
        }
      ]
    },
    "tests": {
      "exists-cidr": {
        "host": "1.2.3.4",
        "description": "exists           = \"exists\"   \":\" domain-spec",
        "mailfrom": "foo@e3.example.com",
        "spec": "5.7/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "exists-ip4": {
        "host": "1.2.3.4",
        "description": "mechanism matches if any DNS A RR exists",
        "mailfrom": "foo@e4.example.com",
        "spec": "5.7/3",
        "result": "pass",
        "helo": "mail.example.com"
      },
      "exists-empty-domain": {
        "host": "1.2.3.4",
        "description": "domain-spec cannot be empty.",
        "mailfrom": "foo@e1.example.com",
        "spec": "5.7/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "exists-implicit": {
        "host": "1.2.3.4",
        "description": "exists           = \"exists\"   \":\" domain-spec",
        "mailfrom": "foo@e2.example.com",
        "spec": "5.7/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "exists-ip6": {
        "host": "CAFE:BABE::3",
        "description": "The lookup type is A even when the connection is ip6",
        "mailfrom": "foo@e4.example.com",
        "spec": "5.7/3",
        "result": "pass",
        "helo": "mail.example.com"
      },
      "exists-dnserr": {
        "host": "CAFE:BABE::3",
        "description": "Result for DNS error clarified in RFC7208: MTAs or other processors  SHOULD impose a limit on the maximum amount of elapsed time to evaluate  check_host().  Such a limit SHOULD allow at least 20 seconds.  If such  a limit is exceeded, the result of authorization SHOULD be \"temperror\".",
        "mailfrom": "foo@e6.example.com",
        "spec": "5/8",
        "result": "temperror",
        "helo": "mail.example.com"
      },
      "exists-ip6only": {
        "host": "CAFE:BABE::3",
        "description": "The lookup type is A even when the connection is ip6",
        "mailfrom": "foo@e5.example.com",
        "spec": "5.7/3",
        "result": "fail",
        "helo": "mail.example.com"
      }
    }
  },
  {
    "description": "IP4 mechanism syntax",
    "zonedata": {
      "e5.example.com": [
        {
          "SPF": "v=spf1 ip4"
        }
      ],
      "e9.example.com": [
        {
          "SPF": "v=spf1 ip4:1.2.3"
        }
      ],
      "e7.example.com": [
        {
          "SPF": "v=spf1 -ip4:1.2.3.4 ip6:::FFFF:1.2.3.4"
        }
      ],
      "e1.example.com": [
        {
          "SPF": "v=spf1 ip4:1.1.1.1/0 -all"
        }
      ],
      "e2.example.com": [
        {
          "SPF": "v=spf1 ip4:1.2.3.4/32 -all"
        }
      ],
      "e3.example.com": [
        {
          "SPF": "v=spf1 ip4:1.2.3.4/33 -all"
        }
      ],
      "e4.example.com": [
        {
          "SPF": "v=spf1 ip4:1.2.3.4/032 -all"
        }
      ],
      "mail.example.com": [
        {
          "A": "1.2.3.4"
        }
      ],
      "e8.example.com": [
        {
          "SPF": "v=spf1 ip4:1.2.3.4:8080"
        }
      ],
      "e6.example.com": [
        {
          "SPF": "v=spf1 ip4:1.2.3.4//32"
        }
      ]
    },
    "tests": {
      "cidr4-33": {
        "comment": "The RFC4408 was silent on ip4 CIDR > 32 or ip6 CIDR > 128, but RFC7208  is explicit.  Invalid CIDR is prohibited.",
        "host": "1.2.3.4",
        "description": "Invalid CIDR should get permerror.",
        "mailfrom": "foo@e3.example.com",
        "spec": "5.6/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "cidr4-32": {
        "host": "1.2.3.4",
        "description": "ip4-cidr-length  = \"/\" 1*DIGIT",
        "mailfrom": "foo@e2.example.com",
        "spec": "5.6/2",
        "result": "pass",
        "helo": "mail.example.com"
      },
      "bad-ip4-port": {
        "comment": "This has actually been published in SPF records.",
        "host": "1.2.3.4",
        "description": "IP4              = \"ip4\"      \":\" ip4-network   [ ip4-cidr-length ]",
        "mailfrom": "foo@e8.example.com",
        "spec": "5.6/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "cidr4-0": {
        "host": "1.2.3.4",
        "description": "ip4-cidr-length  = \"/\" 1*DIGIT",
        "mailfrom": "foo@e1.example.com",
        "spec": "5.6/2",
        "result": "pass",
        "helo": "mail.example.com"
      },
      "bare-ip4": {
        "host": "1.2.3.4",
        "description": "IP4              = \"ip4\"      \":\" ip4-network   [ ip4-cidr-length ]",
        "mailfrom": "foo@e5.example.com",
        "spec": "5.6/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "bad-ip4-short": {
        "host": "1.2.3.4",
        "description": "It is not permitted to omit parts of the IP address instead of using CIDR notations.",
        "mailfrom": "foo@e9.example.com",
        "spec": "5.6/4",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "cidr4-032": {
        "comment": "Leading zeros are not explicitly prohibited by the RFC. However, since the RFC explicity prohibits leading zeros in ip4-network, our interpretation is that CIDR should be also.",
        "host": "1.2.3.4",
        "description": "Invalid CIDR should get permerror.",
        "mailfrom": "foo@e4.example.com",
        "spec": "5.6/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "ip4-mapped-ip6": {
        "host": "::FFFF:1.2.3.4",
        "description": "IP4 mapped IP6 connections MUST be treated as IP4",
        "mailfrom": "foo@e7.example.com",
        "spec": "5/9/2",
        "result": "fail",
        "helo": "mail.example.com"
      },
      "ip4-dual-cidr": {
        "host": "1.2.3.4",
        "description": "dual-cidr-length not permitted on ip4",
        "mailfrom": "foo@e6.example.com",
        "spec": "5.6/2",
        "result": "permerror",
        "helo": "mail.example.com"
      }
    }
  },
  {
    "comment": "IP4 only implementations may skip tests where host is not IP4",
    "description": "IP6 mechanism syntax",
    "zonedata": {
      "e3.example.com": [
        {
          "SPF": "v=spf1 ip6:::1.1.1.1/129"
        }
      ],
      "e1.example.com": [
        {
          "SPF": "v=spf1 -all ip6"
        }
      ],
      "e5.example.com": [
        {
          "SPF": "v=spf1 ip6:Cafe:Babe:8000::/33"
        }
      ],
      "e4.example.com": [
        {
          "SPF": "v=spf1 ip6:::1.1.1.1//33"
        }
      ],
      "mail.example.com": [
        {
          "A": "1.2.3.4"
        }
      ],
      "e2.example.com": [
        {
          "SPF": "v=spf1 ip6:::1.1.1.1/0"
        }
      ],
      "e6.example.com": [
        {
          "SPF": "v=spf1 ip6::CAFE::BABE"
        }
      ]
    },
    "tests": {
      "bare-ip6": {
        "host": "1.2.3.4",
        "description": "IP6              = \"ip6\"      \":\" ip6-network   [ ip6-cidr-length ]",
        "mailfrom": "foo@e1.example.com",
        "spec": "5.6/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "cidr6-33": {
        "host": "CAFE:BABE:8000::",
        "description": "make sure ip4 cidr restriction are not used for ip6",
        "mailfrom": "foo@e5.example.com",
        "spec": "5.6/2",
        "result": "pass",
        "helo": "mail.example.com"
      },
      "cidr6-0-ip4": {
        "comment": "There was controversy over IPv4 mapped connections.  RFC7208 clearly states IPv4 mapped addresses only match ip4: mechanisms.",
        "host": "1.2.3.4",
        "description": "IP4 connections do not match ip6.",
        "mailfrom": "foo@e2.example.com",
        "spec": "5/9/2",
        "result": "neutral",
        "helo": "mail.example.com"
      },
      "ip6-bad1": {
        "host": "1.2.3.4",
        "description": "",
        "mailfrom": "foo@e6.example.com",
        "spec": "5.6/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "cidr6-ip4": {
        "comment": "There was controversy over ip4 mapped connections.  RFC7208 clearly requires such connections to be considered as ip4 only.",
        "host": "::FFFF:1.2.3.4",
        "description": "Even if the SMTP connection is via IPv6, an IPv4-mapped IPv6 IP address (see RFC 3513, Section 2.5.5) MUST still be considered an IPv4 address.",
        "mailfrom": "foo@e2.example.com",
        "spec": "5/9/2",
        "result": "neutral",
        "helo": "mail.example.com"
      },
      "cidr6-bad": {
        "comment": "IP4 only implementations MUST fully syntax check all mechanisms, even if they otherwise ignore them.",
        "host": "1.2.3.4",
        "description": "dual-cidr syntax not used for ip6",
        "mailfrom": "foo@e4.example.com",
        "spec": "5.6/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "cidr6-129": {
        "comment": "IP4 only implementations MUST fully syntax check all mechanisms, even if they otherwise ignore them.",
        "host": "1.2.3.4",
        "description": "Invalid CIDR",
        "mailfrom": "foo@e3.example.com",
        "spec": "5.6/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "cidr6-33-ip4": {
        "host": "1.2.3.4",
        "description": "make sure ip4 cidr restriction are not used for ip6",
        "mailfrom": "foo@e5.example.com",
        "spec": "5.6/2",
        "result": "neutral",
        "helo": "mail.example.com"
      },
      "cidr6-0": {
        "host": "DEAF:BABE::CAB:FEE",
        "description": "Match any IP6",
        "mailfrom": "foo@e2.example.com",
        "spec": "5/8",
        "result": "pass",
        "helo": "mail.example.com"
      }
    }
  },
  {
    "comment": "Implementing exp= is optional.  If not implemented, the test driver should not check the explanation field.",
    "description": "Semantics of exp and other modifiers",
    "zonedata": {
      "e16.example.com": [
        {
          "SPF": "v=spf1 exp=-all"
        }
      ],
      "e17.example.com": [
        {
          "SPF": "v=spf1 redirect=-all ?all"
        }
      ],
      "e5.example.com": [
        {
          "SPF": "v=spf1 1up=foo"
        }
      ],
      "e1.example.com": [
        {
          "SPF": "v=spf1 exp=exp1.example.com redirect=e2.example.com"
        }
      ],
      "e23.example.com": [
        {
          "SPF": "v=spf1 a:erehwon.example.com a:foobar.com exp=nxdomain.com -all"
        }
      ],
      "testimplicit.example.com": [
        {
          "SPF": "v=spf1 a -all"
        },
        {
          "A": "192.0.2.2"
        }
      ],
      "e18.example.com": [
        {
          "SPF": "v=spf1 ?all redirect="
        }
      ],
      "exp4.example.com": [
        {
          "TXT": "%{l} in implementation"
        }
      ],
      "e21msg.example.com": [
        "TIMEOUT"
      ],
      "exp2.example.com": [
        {
          "TXT": "See me."
        }
      ],
      "e22.example.com": [
        {
          "SPF": "v=spf1 exp=mail.example.com -all"
        }
      ],
      "e24.example.com": [
        {
          "SPF": "v=spf1 redirect=testimplicit.example.com"
        },
        {
          "A": "192.0.2.1"
        }
      ],
      "e13.example.com": [
        {
          "SPF": "v=spf1 exp=e13msg.example.com -all"
        }
      ],
      "e10.example.com": [
        {
          "SPF": "v=spf1 redirect=erehwon.example.com"
        }
      ],
      "e14.example.com": [
        {
          "SPF": "v=spf1 exp=e13msg.example.com -all exp=e11msg.example.com"
        }
      ],
      "e8.example.com": [
        {
          "SPF": "v=spf1 -all exp=exp4.example.com"
        }
      ],
      "twoexp.example.com": [
        {
          "TXT": "one"
        },
        {
          "TXT": "two"
        }
      ],
      "e19.example.com": [
        {
          "SPF": "v=spf1 default=pass"
        }
      ],
      "e13msg.example.com": [
        {
          "TXT": "The %{x}-files."
        }
      ],
      "e4.example.com": [
        {
          "SPF": "v=spf1 -all exp=exp2.example.com"
        }
      ],
      "e9.example.com": [
        {
          "SPF": "v=spf1 -all foo=%abc"
        }
      ],
      "e2.example.com": [
        {
          "SPF": "v=spf1 -all"
        }
      ],
      "e3.example.com": [
        {
          "SPF": "v=spf1 exp=exp1.example.com redirect=e4.example.com"
        }
      ],
      "exp1.example.com": [
        {
          "TXT": "No-see-um"
        }
      ],
      "e11.example.com": [
        {
          "SPF": "v=spf1 -all exp=e11msg.example.com"
        }
      ],
      "mail.example.com": [
        {
          "A": "1.2.3.4"
        }
      ],
      "e20.example.com": [
        {
          "SPF": "v=spf1 default=+"
        }
      ],
      "e12.example.com": [
        {
          "SPF": "v=spf1 exp= -all"
        }
      ],
      "badexp.example.com": [
        {
          "TXT": "\u00ef\u00bb\u00bfExplanation"
        }
      ],
      "nonascii.example.com": [
        {
          "SPF": "v=spf1 exp=badexp.example.com -all"
        }
      ],
      "tworecs.example.com": [
        {
          "SPF": "v=spf1 exp=twoexp.example.com -all"
        }
      ],
      "e11msg.example.com": [
        {
          "TXT": "Answer a fool according to his folly."
        },
        {
          "TXT": "Do not answer a fool according to his folly."
        }
      ],
      "e15.example.com": [
        {
          "SPF": "v=spf1 redirect=e12.example.com -all redirect=e12.example.com"
        }
      ],
      "e21.example.com": [
        {
          "SPF": "v=spf1 exp=e21msg.example.com -all"
        }
      ],
      "e7.example.com": [
        {
          "SPF": "v=spf1 include:e3.example.com -all exp=exp3.example.com"
        }
      ],
      "e6.example.com": [
        {
          "SPF": "v=spf1 =all"
        }
      ],
      "exp3.example.com": [
        {
          "TXT": "Correct!"
        }
      ]
    },
    "tests": {
      "redirect-cancels-prior-exp": {
        "host": "1.2.3.4",
        "description": "when executing \"redirect\", exp= from the original domain MUST NOT be used.",
        "mailfrom": "foo@e3.example.com",
        "explanation": "See me.",
        "spec": "6.2/13",
        "result": "fail",
        "helo": "mail.example.com"
      },
      "exp-empty-domain": {
        "comment": "Section 6.2/4 says, \"If domain-spec is empty, or there are any DNS processing errors (any RCODE other than 0), or if no records are returned, or if more than one record is returned, or if there are syntax errors in the explanation string, then proceed as if no exp modifier was given.\"  However, \"if domain-spec is empty\" conflicts with the grammar given for the exp modifier.  This was reported as an erratum, and the solution chosen was to report explicit \"exp=\" as PermError, but ignore problems due to macro expansion, DNS, or invalid explanation string.",
        "host": "1.2.3.4",
        "description": "PermError if exp= domain-spec is empty.\n",
        "mailfrom": "foo@e12.example.com",
        "spec": "6.2/4",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "dorky-sentinel": {
        "comment": "Spaces are allowed in local-part.",
        "explanation": "Macro Error in implementation",
        "description": "An implementation that uses a legal expansion as a sentinel.  We cannot check them all, but we can check this one.",
        "mailfrom": "Macro Error@e8.example.com",
        "spec": "7.1/6",
        "result": "fail",
        "helo": "mail.example.com",
        "host": "1.2.3.4"
      },
      "non-ascii-exp": {
        "comment": "Checking a possibly different code path for non-ascii chars.",
        "explanation": "DEFAULT",
        "description": "SPF explanation text is restricted to 7-bit ascii.",
        "mailfrom": "foobar@nonascii.example.com",
        "spec": "6.2/5",
        "result": "fail",
        "helo": "hosed",
        "host": "1.2.3.4"
      },
      "redirect-none": {
        "host": "1.2.3.4",
        "description": "If no SPF record is found, or if the target-name is malformed, the result is a \"PermError\" rather than \"None\".",
        "mailfrom": "foo@e10.example.com",
        "spec": "6.1/4",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "exp-dns-error": {
        "comment": "If domain-spec is empty, or there are any DNS processing errors (any RCODE other than 0), or if no records are returned, or if more than one record is returned, or if there are syntax errors in the explanation string, then proceed as if no exp modifier was given.",
        "explanation": "DEFAULT",
        "description": "Ignore exp if DNS error.\n",
        "mailfrom": "foo@e21.example.com",
        "spec": "6.2/4",
        "result": "fail",
        "helo": "mail.example.com",
        "host": "1.2.3.4"
      },
      "redirect-cancels-exp": {
        "host": "1.2.3.4",
        "description": "when executing \"redirect\", exp= from the original domain MUST NOT be used.",
        "mailfrom": "foo@e1.example.com",
        "explanation": "DEFAULT",
        "spec": "6.2/13",
        "result": "fail",
        "helo": "mail.example.com"
      },
      "default-modifier-obsolete": {
        "comment": "Some implementations may have a leftover default= modifier from earlier drafts.",
        "host": "1.2.3.4",
        "description": "Unknown modifiers do not modify the RFC SPF result.\n",
        "mailfrom": "foo@e19.example.com",
        "spec": "6/3",
        "result": "neutral",
        "helo": "mail.example.com"
      },
      "invalid-modifier": {
        "comment": "Unknown modifier name must begin with alpha.",
        "host": "1.2.3.4",
        "description": "unknown-modifier = name \"=\" macro-string\nname             = ALPHA *( ALPHA / DIGIT / \"-\" / \"_\" / \".\" )\n",
        "mailfrom": "foo@e5.example.com",
        "spec": "A/3",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "default-modifier-obsolete2": {
        "comment": "Some implementations may have a leftover default= modifier from earlier drafts.",
        "host": "1.2.3.4",
        "description": "Unknown modifiers do not modify the RFC SPF result.\n",
        "mailfrom": "foo@e20.example.com",
        "spec": "6/3",
        "result": "neutral",
        "helo": "mail.example.com"
      },
      "exp-void": {
        "comment": "Non-existent exp= domains MUST NOT count against the void lookup limit. Implementations should lookup any exp record at most once after computing the result.",
        "host": "1.2.3.4",
        "description": "exp=nxdomain.tld\n",
        "mailfrom": "foo@e23.example.com",
        "spec": "4.6.4/1, 6/2",
        "result": "fail",
        "helo": "mail.example.com"
      },
      "redirect-implicit": {
        "host": "192.0.2.2",
        "description": "redirect changes implicit domain\n",
        "mailfrom": "bar@e24.example.com",
        "spec": "6.1/4",
        "result": "pass",
        "helo": "e24.example.com"
      },
      "redirect-empty-domain": {
        "comment": "Unlike for exp, there is no instruction to override the permerror for an empty domain-spec (which is invalid syntax).",
        "host": "1.2.3.4",
        "description": "redirect = \"redirect\" \"=\" domain-spec\n",
        "mailfrom": "foo@e18.example.com",
        "spec": "6.2/4",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "exp-no-txt": {
        "comment": "If domain-spec is empty, or there are any DNS processing errors (any RCODE other than 0), or if no records are returned, or if more than one record is returned, or if there are syntax errors in the explanation string, then proceed as if no exp modifier was given.",
        "explanation": "DEFAULT",
        "description": "Ignore exp if no TXT records.\n",
        "mailfrom": "foo@e22.example.com",
        "spec": "6.2/4",
        "result": "fail",
        "helo": "mail.example.com",
        "host": "1.2.3.4"
      },
      "redirect-syntax-error": {
        "comment": "A literal application of the grammar causes modifier syntax errors (except for macro syntax) to become unknown-modifier.\n\n  modifier = explanation | redirect | unknown-modifier\n\nHowever, it is generally agreed, with precedent in other RFCs, that unknown-modifier should not be \"greedy\", and should not match known modifier names.  There should have been explicit prose to this effect, and some has been proposed as an erratum.",
        "host": "1.2.3.4",
        "description": "redirect      = \"redirect\" \"=\" domain-spec\n",
        "mailfrom": "foo@e17.example.com",
        "spec": "6.1/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "exp-multiple-txt": {
        "comment": "If domain-spec is empty, or there are any DNS processing errors (any RCODE other than 0), or if no records are returned, or if more than one record is returned, or if there are syntax errors in the explanation string, then proceed as if no exp modifier was given.",
        "explanation": "DEFAULT",
        "description": "Ignore exp if multiple TXT records.\n",
        "mailfrom": "foo@e11.example.com",
        "spec": "6.2/4",
        "result": "fail",
        "helo": "mail.example.com",
        "host": "1.2.3.4"
      },
      "include-ignores-exp": {
        "host": "1.2.3.4",
        "description": "when executing \"include\", exp= from the target domain MUST NOT be used.",
        "mailfrom": "foo@e7.example.com",
        "explanation": "Correct!",
        "spec": "6.2/13",
        "result": "fail",
        "helo": "mail.example.com"
      },
      "redirect-twice": {
        "comment": "These two modifiers (exp,redirect) MUST NOT appear in a record more than once each. If they do, then check_host() exits with a result of \"PermError\".",
        "host": "1.2.3.4",
        "description": "redirect= appears twice.\n",
        "mailfrom": "foo@e15.example.com",
        "spec": "6/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "empty-modifier-name": {
        "comment": "Unknown modifier name must not be empty.",
        "host": "1.2.3.4",
        "description": "name             = ALPHA *( ALPHA / DIGIT / \"-\" / \"_\" / \".\" )\n",
        "mailfrom": "foo@e6.example.com",
        "spec": "A/3",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "exp-twice": {
        "comment": "These two modifiers (exp,redirect) MUST NOT appear in a record more than once each. If they do, then check_host() exits with a result of \"PermError\".",
        "host": "1.2.3.4",
        "description": "exp= appears twice.\n",
        "mailfrom": "foo@e14.example.com",
        "spec": "6/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "exp-syntax-error": {
        "comment": "A literal application of the grammar causes modifier syntax errors (except for macro syntax) to become unknown-modifier.\n\n  modifier = explanation | redirect | unknown-modifier\n\nHowever, it is generally agreed, with precedent in other RFCs, that unknown-modifier should not be \"greedy\", and should not match known modifier names.  There should have been explicit prose to this effect, and some has been proposed as an erratum.",
        "host": "1.2.3.4",
        "description": "explanation      = \"exp\" \"=\" domain-spec\n",
        "mailfrom": "foo@e16.example.com",
        "spec": "6.2/1",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "two-exp-records": {
        "host": "1.2.3.4",
        "description": "Must ignore exp= if DNS returns more than one TXT record.",
        "mailfrom": "foobar@tworecs.example.com",
        "explanation": "DEFAULT",
        "spec": "6.2/4",
        "result": "fail",
        "helo": "hosed"
      },
      "explanation-syntax-error": {
        "comment": "If domain-spec is empty, or there are any DNS processing errors (any RCODE other than 0), or if no records are returned, or if more than one record is returned, or if there are syntax errors in the explanation string, then proceed as if no exp modifier was given.",
        "explanation": "DEFAULT",
        "description": "Ignore exp if the explanation string has a syntax error.\n",
        "mailfrom": "foo@e13.example.com",
        "spec": "6.2/4",
        "result": "fail",
        "helo": "mail.example.com",
        "host": "1.2.3.4"
      },
      "unknown-modifier-syntax": {
        "comment": "Unknown modifiers must have valid macro syntax.",
        "host": "1.2.3.4",
        "description": "unknown-modifier = name \"=\" macro-string\n",
        "mailfrom": "foo@e9.example.com",
        "spec": "A/3",
        "result": "permerror",
        "helo": "mail.example.com"
      }
    }
  },
  {
    "description": "Macro expansion rules",
    "zonedata": {
      "a.spf.example.com": [
        {
          "SPF": "v=spf1 include:o.spf.example.com. ~all"
        }
      ],
      "e5.example.com": [
        {
          "SPF": "v=spf1 a:%{a}.example.com -all"
        }
      ],
      "42.218.168.192.in-addr.arpa": [
        {
          "PTR": "mx.example.com"
        },
        {
          "PTR": "mx.e7.example.com"
        }
      ],
      "e1.example.com": [
        {
          "SPF": "v=spf1 -exists:%(ir).sbl.example.com ?all"
        }
      ],
      "somewhat.long.exp.example.com": [
        {
          "SPF": "v=spf1 -all exp=foobar.%{o}.%{o}.%{o}.%{o}.%{o}.%{o}.%{o}.%{o}.example.com"
        }
      ],
      "3.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.E.B.A.B.E.F.A.C.ip6.arpa": [
        {
          "PTR": "mx.example.com"
        }
      ],
      "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.E.B.A.B.E.F.A.C.ip6.arpa": [
        {
          "PTR": "mx.example.com"
        }
      ],
      "msg.example.com": [
        {
          "TXT": "This is a test."
        }
      ],
      "exp.example.com": [
        {
          "SPF": "v=spf1 exp=msg.example.com. -all"
        }
      ],
      "e4msg.example.com": [
        {
          "TXT": "%{c} is queried as %{ir}.%{v}.arpa"
        }
      ],
      "40.218.168.192.in-addr.arpa": [
        {
          "PTR": "mx.example.com"
        }
      ],
      "mx.example.com.ok.example.com": [
        {
          "A": "127.0.0.2"
        }
      ],
      "e9.example.com": [
        {
          "SPF": "v=spf1 a:%{H} -all"
        }
      ],
      "e6msg.example.com": [
        {
          "TXT": "connect from %{p}"
        }
      ],
      "somewhat.long.exp.example.com.somewhat.long.exp.example.com.somewhat.long.exp.example.com.somewhat.long.exp.example.com.somewhat.long.exp.example.com.somewhat.long.exp.example.com.somewhat.long.exp.example.com.somewhat.long.exp.example.com.example.com": [
        {
          "TXT": "Congratulations!  That was tricky."
        }
      ],
      "e10.example.com": [
        {
          "SPF": "v=spf1 -include:_spfh.%{d2} ip4:1.2.3.0/24 -all"
        }
      ],
      "msgbas2x.cos.example.com": [
        {
          "A": "192.168.218.40"
        }
      ],
      "e8.example.com": [
        {
          "SPF": "v=spf1 -all exp=msg8.%{D2}"
        }
      ],
      "macro%percent  space%20url-space.example.com": [
        {
          "A": "1.2.3.4"
        }
      ],
      "bar.foo.user.example.com": [
        {
          "A": "127.0.0.2"
        }
      ],
      "1.2.3.4.gladstone.philip.user.example.com": [
        {
          "A": "127.0.0.2"
        }
      ],
      "e4.example.com": [
        {
          "SPF": "v=spf1 -all exp=e4msg.example.com"
        }
      ],
      "msg8.example.com": [
        {
          "TXT": "http://example.com/why.html?l=%{L}"
        }
      ],
      "40.218.168.192.example.com": [
        {
          "TXT": "Connections from %{c} not authorized."
        }
      ],
      "e2.example.com": [
        {
          "SPF": "v=spf1 -all exp=%{r}.example.com"
        }
      ],
      "e1e.example.com": [
        {
          "SPF": "v=spf1 exists:foo%(ir).sbl.example.com ?all"
        }
      ],
      "e3.example.com": [
        {
          "SPF": "v=spf1 -all exp=%{ir}.example.com"
        }
      ],
      "example.com": [
        {
          "A": "192.168.90.76"
        },
        {
          "SPF": "v=spf1 redirect=%{d}.d.spf.example.com."
        }
      ],
      "e1t.example.com": [
        {
          "SPF": "v=spf1 exists:foo%.sbl.example.com ?all"
        }
      ],
      "e11.example.com": [
        {
          "SPF": "v=spf1 exists:%{i}.%{l2r-}.user.%{d2}"
        }
      ],
      "mx.e7.example.com": [
        {
          "A": "192.168.218.42"
        }
      ],
      "e12.example.com": [
        {
          "SPF": "v=spf1 exists:%{l2r+-}.user.%{d2}"
        }
      ],
      "_spfh.example.com": [
        {
          "SPF": "v=spf1 -a:%{h} +all"
        }
      ],
      "mx.e7.example.com.should.example.com": [
        {
          "A": "127.0.0.2"
        }
      ],
      "o.spf.example.com": [
        {
          "SPF": "v=spf1 ip4:192.168.218.40"
        }
      ],
      "e1a.example.com": [
        {
          "SPF": "v=spf1 a:macro%%percent%_%_space%-url-space.example.com -all"
        }
      ],
      "example.com.d.spf.example.com": [
        {
          "SPF": "v=spf1 redirect=a.spf.example.com"
        }
      ],
      "41.218.168.192.in-addr.arpa": [
        {
          "PTR": "mx.example.com"
        }
      ],
      "e7.example.com": [
        {
          "SPF": "v=spf1 exists:%{p}.should.example.com ~exists:%{p}.ok.example.com"
        }
      ],
      "e6.example.com": [
        {
          "SPF": "v=spf1 -all exp=e6msg.example.com"
        }
      ],
      "mx.example.com": [
        {
          "A": "192.168.218.41"
        },
        {
          "A": "192.168.218.42"
        },
        {
          "AAAA": "CAFE:BABE::2"
        },
        {
          "AAAA": "CAFE:BABE::3"
        }
      ]
    },
    "tests": {
      "macro-mania-in-domain": {
        "host": "1.2.3.4",
        "description": "macro-encoded percents (%%), spaces (%_), and URL-percent-encoded spaces (%-)",
        "mailfrom": "test@e1a.example.com",
        "spec": "7.1/3, 7.1/4",
        "result": "pass",
        "helo": "mail.example.com"
      },
      "exp-txt-macro-char": {
        "host": "192.168.218.40",
        "description": "For IPv4 addresses, both the \"i\" and \"c\" macros expand to the standard dotted-quad format.",
        "mailfrom": "test@e3.example.com",
        "explanation": "Connections from 192.168.218.40 not authorized.",
        "spec": "7.1/20",
        "result": "fail",
        "helo": "msgbas2x.cos.example.com"
      },
      "v-macro-ip6": {
        "host": "CAFE:BABE::1",
        "description": "v = the string \"in-addr\" if <ip> is ipv4, or \"ip6\" if <ip> is ipv6",
        "mailfrom": "test@e4.example.com",
        "explanation": "cafe:babe::1 is queried as 1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.E.B.A.B.E.F.A.C.ip6.arpa",
        "spec": "7.1/6",
        "result": "fail",
        "helo": "msgbas2x.cos.example.com"
      },
      "upper-macro": {
        "comment": "unreserved  = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n",
        "explanation": "http://example.com/why.html?l=~jack%26jill%3Dup-a_b3.c",
        "description": "Uppercased macros expand exactly as their lowercased equivalents, and are then URL escaped.  All chars not in the unreserved set MUST be escaped.",
        "mailfrom": "~jack&jill=up-a_b3.c@e8.example.com",
        "spec": "7.1/26",
        "result": "fail",
        "helo": "msgbas2x.cos.example.com",
        "host": "192.168.218.42"
      },
      "trailing-dot-exp": {
        "comment": "A simple way for an implementation to ignore trailing dots on domains is to remove it when present.  But be careful not to remove it for explanation text.",
        "explanation": "This is a test.",
        "description": "trailing dot is not removed from explanation",
        "mailfrom": "test@exp.example.com",
        "spec": 7.1,
        "result": "fail",
        "helo": "msgbas2x.cos.example.com",
        "host": "192.168.218.40"
      },
      "p-macro-ip4-novalid": {
        "comment": "The PTR in this example does not validate.",
        "explanation": "connect from unknown",
        "description": "p = the validated domain name of <ip>",
        "mailfrom": "test@e6.example.com",
        "spec": "7.1/22",
        "result": "fail",
        "helo": "msgbas2x.cos.example.com",
        "host": "192.168.218.40"
      },
      "v-macro-ip4": {
        "host": "192.168.218.40",
        "description": "v = the string \"in-addr\" if <ip> is ipv4, or \"ip6\" if <ip> is ipv6",
        "mailfrom": "test@e4.example.com",
        "explanation": "192.168.218.40 is queried as 40.218.168.192.in-addr.arpa",
        "spec": "7.1/6",
        "result": "fail",
        "helo": "msgbas2x.cos.example.com"
      },
      "domain-name-truncation": {
        "host": "192.168.218.40",
        "description": "When the result of macro expansion is used in a domain name query, if the expanded domain name exceeds 253 characters, the left side is truncated to fit, by removing successive domain labels until the total length does not exceed 253 characters.",
        "mailfrom": "test@somewhat.long.exp.example.com",
        "explanation": "Congratulations!  That was tricky.",
        "spec": "7.1/25",
        "result": "fail",
        "helo": "msgbas2x.cos.example.com"
      },
      "p-macro-multiple": {
        "comment": "If a subdomain of the <domain> is present, it SHOULD be used.",
        "host": "192.168.218.42",
        "description": "p = the validated domain name of <ip>",
        "mailfrom": "test@e7.example.com",
        "spec": "7.1/22",
        "result": [
          "pass",
          "softfail"
        ],
        "helo": "msgbas2x.cos.example.com"
      },
      "require-valid-helo": {
        "host": "1.2.3.4",
        "description": "Example of requiring valid helo in sender policy.  This is a complex policy testing several points at once.",
        "mailfrom": "test@e10.example.com",
        "spec": "7.1/6",
        "result": "fail",
        "helo": "OEMCOMPUTER"
      },
      "invalid-macro-char": {
        "host": "192.168.218.40",
        "description": "A '%' character not followed by a '{', '%', '-', or '_' character is a syntax error.",
        "mailfrom": "test@e1.example.com",
        "spec": "7.1/9",
        "result": "permerror",
        "helo": "msgbas2x.cos.example.com"
      },
      "macro-reverse-split-on-dash": {
        "host": "1.2.3.4",
        "description": "Macro value transformation (splitting on arbitrary characters, reversal, number of right-hand parts to use)",
        "mailfrom": "philip-gladstone-test@e11.example.com",
        "spec": "7.1/15, 7.1/16, 7.1/17, 7.1/18",
        "result": "pass",
        "helo": "mail.example.com"
      },
      "macro-multiple-delimiters": {
        "host": "1.2.3.4",
        "description": "Multiple delimiters may be specified in a macro expression.\n  macro-expand = ( \"%{\" macro-letter transformers *delimiter \"}\" )\n                 / \"%%\" / \"%_\" / \"%-\"",
        "mailfrom": "foo-bar+zip+quux@e12.example.com",
        "spec": "7.1/15, 7.1/16",
        "result": "pass",
        "helo": "mail.example.com"
      },
      "p-macro-ip4-valid": {
        "comment": "If a subdomain of the <domain> is present, it SHOULD be used.",
        "explanation": "connect from mx.example.com",
        "description": "p = the validated domain name of <ip>",
        "mailfrom": "test@e6.example.com",
        "spec": "7.1/22",
        "result": "fail",
        "helo": "msgbas2x.cos.example.com",
        "host": "192.168.218.41"
      },
      "invalid-hello-macro": {
        "comment": "Domain-spec must end in either a macro, or a valid toplabel. It is not correct to check syntax after macro expansion.",
        "host": "192.168.218.40",
        "description": "h = HELO/EHLO domain, but HELO is invalid",
        "mailfrom": "test@e9.example.com",
        "spec": "7.1/2",
        "result": "fail",
        "helo": "JUMPIN' JUPITER"
      },
      "hello-macro": {
        "host": "192.168.218.40",
        "description": "h = HELO/EHLO domain",
        "mailfrom": "test@e9.example.com",
        "spec": "7.1/6",
        "result": "pass",
        "helo": "msgbas2x.cos.example.com"
      },
      "hello-domain-literal": {
        "comment": "Domain-spec must end in either a macro, or a valid toplabel. It is not correct to check syntax after macro expansion.",
        "host": "192.168.218.40",
        "description": "h = HELO/EHLO domain, but HELO is a domain literal",
        "mailfrom": "test@e9.example.com",
        "spec": "7.1/2",
        "result": "fail",
        "helo": "[192.168.218.40]"
      },
      "invalid-embedded-macro-char": {
        "host": "192.168.218.40",
        "description": "A '%' character not followed by a '{', '%', '-', or '_' character is a syntax error.",
        "mailfrom": "test@e1e.example.com",
        "spec": "7.1/9",
        "result": "permerror",
        "helo": "msgbas2x.cos.example.com"
      },
      "trailing-dot-domain": {
        "host": "192.168.218.40",
        "description": "trailing dot is ignored for domains",
        "mailfrom": "test@example.com",
        "spec": "7.1/16",
        "result": "pass",
        "helo": "msgbas2x.cos.example.com"
      },
      "p-macro-ip6-novalid": {
        "comment": "The PTR in this example does not validate.",
        "explanation": "connect from unknown",
        "description": "p = the validated domain name of <ip>",
        "mailfrom": "test@e6.example.com",
        "spec": "7.1/22",
        "result": "fail",
        "helo": "msgbas2x.cos.example.com",
        "host": "CAFE:BABE::1"
      },
      "undef-macro": {
        "host": "CAFE:BABE::192.168.218.40",
        "description": "Allowed macros chars are 'slodipvh' plus 'crt' in explanation.",
        "mailfrom": "test@e5.example.com",
        "spec": "7.1/6",
        "result": "permerror",
        "helo": "msgbas2x.cos.example.com"
      },
      "exp-only-macro-char": {
        "host": "192.168.218.40",
        "description": "The following macro letters are allowed only in \"exp\" text: c, r, t",
        "mailfrom": "test@e2.example.com",
        "spec": "7.1/8",
        "result": "permerror",
        "helo": "msgbas2x.cos.example.com"
      },
      "p-macro-ip6-valid": {
        "comment": "If a subdomain of the <domain> is present, it SHOULD be used.",
        "explanation": "connect from mx.example.com",
        "description": "p = the validated domain name of <ip>",
        "mailfrom": "test@e6.example.com",
        "spec": "7.1/22",
        "result": "fail",
        "helo": "msgbas2x.cos.example.com",
        "host": "CAFE:BABE::3"
      },
      "invalid-trailing-macro-char": {
        "host": "192.168.218.40",
        "description": "A '%' character not followed by a '{', '%', '-', or '_' character is a syntax error.",
        "mailfrom": "test@e1t.example.com",
        "spec": "7.1/9",
        "result": "permerror",
        "helo": "msgbas2x.cos.example.com"
      }
    }
  },
  {
    "description": "Processing limits",
    "zonedata": {
      "e12.example.com": [
        {
          "TXT": "v=spf1 a:err.example.com a:err1.example.com ?all"
        }
      ],
      "e5.example.com": [
        {
          "SPF": "v=spf1 ptr"
        },
        {
          "A": "1.2.3.5"
        }
      ],
      "e9.example.com": [
        {
          "SPF": "v=spf1 a include:inc.example.com a ip4:1.2.3.4 -all"
        },
        {
          "A": "1.2.3.21"
        }
      ],
      "e8.example.com": [
        {
          "SPF": "v=spf1 a include:inc.example.com ip4:1.2.3.4 mx -all"
        },
        {
          "A": "1.2.3.4"
        }
      ],
      "e1.example.com": [
        {
          "SPF": "v=spf1 ip4:1.1.1.1 redirect=e1.example.com"
        },
        {
          "A": "1.2.3.6"
        }
      ],
      "e2.example.com": [
        {
          "SPF": "v=spf1 include:e3.example.com"
        },
        {
          "A": "1.2.3.7"
        }
      ],
      "e3.example.com": [
        {
          "SPF": "v=spf1 include:e2.example.com"
        },
        {
          "A": "1.2.3.8"
        }
      ],
      "e4.example.com": [
        {
          "SPF": "v=spf1 mx"
        },
        {
          "MX": [
            0,
            "mail.example.com"
          ]
        },
        {
          "MX": [
            1,
            "mail.example.com"
          ]
        },
        {
          "MX": [
            2,
            "mail.example.com"
          ]
        },
        {
          "MX": [
            3,
            "mail.example.com"
          ]
        },
        {
          "MX": [
            4,
            "mail.example.com"
          ]
        },
        {
          "MX": [
            5,
            "mail.example.com"
          ]
        },
        {
          "MX": [
            6,
            "mail.example.com"
          ]
        },
        {
          "MX": [
            7,
            "mail.example.com"
          ]
        },
        {
          "MX": [
            8,
            "mail.example.com"
          ]
        },
        {
          "MX": [
            9,
            "mail.example.com"
          ]
        },
        {
          "MX": [
            10,
            "e4.example.com"
          ]
        },
        {
          "A": "1.2.3.5"
        }
      ],
      "e10.example.com": [
        {
          "SPF": "v=spf1 a -all"
        },
        {
          "A": "1.2.3.1"
        },
        {
          "A": "1.2.3.2"
        },
        {
          "A": "1.2.3.3"
        },
        {
          "A": "1.2.3.4"
        },
        {
          "A": "1.2.3.5"
        },
        {
          "A": "1.2.3.6"
        },
        {
          "A": "1.2.3.7"
        },
        {
          "A": "1.2.3.8"
        },
        {
          "A": "1.2.3.9"
        },
        {
          "A": "1.2.3.10"
        },
        {
          "A": "1.2.3.11"
        },
        {
          "A": "1.2.3.12"
        }
      ],
      "inc.example.com": [
        {
          "SPF": "v=spf1 a a a a a a a a"
        },
        {
          "A": "1.2.3.10"
        }
      ],
      "e11.example.com": [
        {
          "TXT": "v=spf1 a:err.example.com a:err1.example.com a:err2.example.com ?all"
        }
      ],
      "mail.example.com": [
        {
          "A": "1.2.3.4"
        }
      ],
      "e7.example.com": [
        {
          "SPF": "v=spf1 a mx a mx a mx a mx a ptr a ip4:1.2.3.4 -all"
        },
        {
          "A": "1.2.3.20"
        }
      ],
      "5.3.2.1.in-addr.arpa": [
        {
          "PTR": "e1.example.com."
        },
        {
          "PTR": "e2.example.com."
        },
        {
          "PTR": "e3.example.com."
        },
        {
          "PTR": "e4.example.com."
        },
        {
          "PTR": "example.com."
        },
        {
          "PTR": "e6.example.com."
        },
        {
          "PTR": "e7.example.com."
        },
        {
          "PTR": "e8.example.com."
        },
        {
          "PTR": "e9.example.com."
        },
        {
          "PTR": "e10.example.com."
        },
        {
          "PTR": "e5.example.com."
        }
      ],
      "e6.example.com": [
        {
          "SPF": "v=spf1 a mx a mx a mx a mx a ptr ip4:1.2.3.4 -all"
        },
        {
          "A": "1.2.3.8"
        },
        {
          "MX": [
            10,
            "e6.example.com"
          ]
        }
      ]
    },
    "tests": {
      "mech-at-limit": {
        "host": "1.2.3.4",
        "description": "SPF implementations MUST limit the number of mechanisms and modifiers that do DNS lookups to at most 10 per SPF check.",
        "mailfrom": "foo@e6.example.com",
        "spec": "4.6.4/1",
        "result": "pass",
        "helo": "mail.example.com"
      },
      "include-at-limit": {
        "comment": "The part of the RFC that talks about MAY parse the entire record first (4.6) is specific to syntax errors.  In RFC7208, processing limits are part of syntax checking (4.6).",
        "host": "1.2.3.4",
        "description": "SPF implementations MUST limit the number of mechanisms and modifiers that do DNS lookups to at most 10 per SPF check.",
        "mailfrom": "foo@e8.example.com",
        "spec": "4.6.4/1",
        "result": "pass",
        "helo": "mail.example.com"
      },
      "mx-limit": {
        "comment": "The required result for this test was the subject of much controversy with RFC4408.  For RFC7208 the ambiguity was resolved in favor of producing a permerror result.",
        "host": "1.2.3.5",
        "description": "there MUST be a limit of no more than 10 MX looked up and checked.",
        "mailfrom": "foo@e4.example.com",
        "spec": "4.6.4/2",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "ptr-limit": {
        "comment": "The result of this test cannot be permerror not only because the RFC does not specify it, but because the sender has no control over the PTR records of spammers. The preferred result reflects evaluating the 10 allowed PTR records in the order returned by the test data. If testing with live DNS, the PTR order may be random, and a pass result would still be compliant.  The SPF result is effectively randomized.",
        "host": "1.2.3.5",
        "description": "there MUST be a limit of no more than 10 PTR looked up and checked.",
        "mailfrom": "foo@e5.example.com",
        "spec": "4.6.4/3",
        "result": [
          "neutral",
          "pass"
        ],
        "helo": "mail.example.com"
      },
      "mech-over-limit": {
        "comment": "We do not check whether an implementation counts mechanisms before or after evaluation.  The RFC is not clear on this.",
        "host": "1.2.3.4",
        "description": "SPF implementations MUST limit the number of mechanisms and modifiers that do DNS lookups to at most 10 per SPF check.",
        "mailfrom": "foo@e7.example.com",
        "spec": "4.6.4/1",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "include-over-limit": {
        "host": "1.2.3.4",
        "description": "SPF implementations MUST limit the number of mechanisms and modifiers that do DNS lookups to at most 10 per SPF check.",
        "mailfrom": "foo@e9.example.com",
        "spec": "4.6.4/1",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "void-at-limit": {
        "comment": "This is a new check in RFC7208, but it's been implemented in Mail::SPF for years with no issues.",
        "host": "1.2.3.4",
        "description": "SPF implementations SHOULD limit \"void lookups\" to two.  An  implementation MAY choose to make such a limit configurable. In this case, a default of two is RECOMMENDED.",
        "mailfrom": "foo@e12.example.com",
        "spec": "4.6.4/7",
        "result": "neutral",
        "helo": "mail.example.com"
      },
      "redirect-loop": {
        "host": "1.2.3.4",
        "description": "SPF implementations MUST limit the number of mechanisms and modifiers that do DNS lookups to at most 10 per SPF check.",
        "mailfrom": "foo@e1.example.com",
        "spec": "4.6.4/1",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "include-loop": {
        "host": "1.2.3.4",
        "description": "SPF implementations MUST limit the number of mechanisms and modifiers that do DNS lookups to at most 10 per SPF check.",
        "mailfrom": "foo@e2.example.com",
        "spec": "4.6.4/1",
        "result": "permerror",
        "helo": "mail.example.com"
      },
      "false-a-limit": {
        "comment": "There seems to be a tendency for developers to want to limit A RRs in addition to MX and PTR.  These are IPs, not usable for 3rd party DoS attacks, and hence need no low limit.",
        "host": "1.2.3.12",
        "description": "unlike MX, PTR, there is no RR limit for A",
        "mailfrom": "foo@e10.example.com",
        "spec": "4.6.4",
        "result": "pass",
        "helo": "mail.example.com"
      },
      "void-over-limit": {
        "host": "1.2.3.4",
        "description": "SPF implementations SHOULD limit \"void lookups\" to two.  An implementation MAY choose to make such a limit configurable. In this case, a default of two is RECOMMENDED.",
        "mailfrom": "foo@e11.example.com",
        "spec": "4.6.4/7",
        "result": "permerror",
        "helo": "mail.example.com"
      }
    }
  },
  {
    "description": "Test cases from implementation bugs",
    "zonedata": {
      "smtp.example.org": [
        {
          "A": "198.51.100.2"
        },
        {
          "AAAA": "2001:db8:ff0:100::3"
        }
      ],
      "_spf.example.com": [
        {
          "SPF": "v=spf1 ptr:fe.example.org ptr:sgp.example.com exp=_expspf.example.org -all"
        }
      ],
      "example.org": [
        {
          "SPF": "v=spf1 mx redirect=_spf.example.com"
        },
        {
          "MX": [
            10,
            "smtp.example.org"
          ]
        },
        {
          "MX": [
            10,
            "smtp1.example.com"
          ]
        }
      ],
      "smtp1.example.com": [
        {
          "A": "192.0.2.26"
        },
        {
          "AAAA": "2001:db8:ff0:200::2"
        }
      ],
      "smtp6-v.fe.example.org": [
        {
          "AAAA": "2001:db8:ff0:100::2"
        }
      ],
      "_expspf.example.org": [
        {
          "TXT": "Sender domain not allowed from this host. Please see http://www.openspf.org/Why?s=mfrom&id=%{S}&ip=%{C}&r=%{R}"
        }
      ],
      "2.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.0.0.F.F.0.8.B.D.0.1.0.0.2.ip6.arpa": [
        {
          "PTR": "smtp6-v.fe.example.org"
        }
      ]
    },
    "tests": {
      "bytes-bug": {
        "comment": "Pyspf failed with strict=2 only.  Other implementations may ignore the strict parameter.",
        "description": "Bytes vs str bug from pyspf.",
        "mailfrom": "test@example.org",
        "spec": "5.4/4",
        "result": "pass",
        "helo": "example.org",
        "host": "2001:db8:ff0:100::2",
        "strict": 2
      }
    }
  }
]
